{"ast":null,"code":"import { GET_POSTS, GET_POST, ADD_POST, DELETE_POST, UPDATE_POST, POST_ERROR, SET_LOADING, SET_CURRENT, CLEAR_CURRENT, LIKE_POST, UNLIKE_POST } from '../types';\nconst postReducer = (state, action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        current: action.payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [action.payload, ...state.posts],\n        loading: false\n      };\n    case UPDATE_POST:\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post),\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== action.payload),\n        loading: false\n      };\n    case LIKE_POST:\n    case UNLIKE_POST:\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === action.payload.id ? {\n          ...post,\n          likes: action.payload.likes\n        } : post),\n        current: state.current && state.current._id === action.payload.id ? {\n          ...state.current,\n          likes: action.payload.likes\n        } : state.current,\n        loading: false\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n};\nexport default postReducer;","map":{"version":3,"names":["GET_POSTS","GET_POST","ADD_POST","DELETE_POST","UPDATE_POST","POST_ERROR","SET_LOADING","SET_CURRENT","CLEAR_CURRENT","LIKE_POST","UNLIKE_POST","postReducer","state","action","type","posts","payload","loading","current","map","post","_id","filter","id","likes","error"],"sources":["/home/marius/Documents/School-blog/client/src/context/post/postReducer.js"],"sourcesContent":["import {\n  GET_POSTS,\n  GET_POST,\n  ADD_POST,\n  DELETE_POST,\n  UPDATE_POST,\n  POST_ERROR,\n  SET_LOADING,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  LIKE_POST,\n  UNLIKE_POST\n} from '../types';\n\nconst postReducer = (state, action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        current: action.payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [action.payload, ...state.posts],\n        loading: false\n      };\n    case UPDATE_POST:\n      return {\n        ...state,\n        posts: state.posts.map(post =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== action.payload),\n        loading: false\n      };\n    case LIKE_POST:\n    case UNLIKE_POST:\n      return {\n        ...state,\n        posts: state.posts.map(post =>\n          post._id === action.payload.id ? { ...post, likes: action.payload.likes } : post\n        ),\n        current: state.current && state.current._id === action.payload.id \n          ? { ...state.current, likes: action.payload.likes } \n          : state.current,\n        loading: false\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postReducer; "],"mappings":"AAAA,SACEA,SAAS,EACTC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,aAAa,EACbC,SAAS,EACTC,WAAW,QACN,UAAU;AAEjB,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKd,SAAS;MACZ,OAAO;QACL,GAAGY,KAAK;QACRG,KAAK,EAAEF,MAAM,CAACG,OAAO;QACrBC,OAAO,EAAE;MACX,CAAC;IACH,KAAKhB,QAAQ;MACX,OAAO;QACL,GAAGW,KAAK;QACRM,OAAO,EAAEL,MAAM,CAACG,OAAO;QACvBC,OAAO,EAAE;MACX,CAAC;IACH,KAAKf,QAAQ;MACX,OAAO;QACL,GAAGU,KAAK;QACRG,KAAK,EAAE,CAACF,MAAM,CAACG,OAAO,EAAE,GAAGJ,KAAK,CAACG,KAAK,CAAC;QACvCE,OAAO,EAAE;MACX,CAAC;IACH,KAAKb,WAAW;MACd,OAAO;QACL,GAAGQ,KAAK;QACRG,KAAK,EAAEH,KAAK,CAACG,KAAK,CAACI,GAAG,CAACC,IAAI,IACzBA,IAAI,CAACC,GAAG,KAAKR,MAAM,CAACG,OAAO,CAACK,GAAG,GAAGR,MAAM,CAACG,OAAO,GAAGI,IACrD,CAAC;QACDH,OAAO,EAAE;MACX,CAAC;IACH,KAAKd,WAAW;MACd,OAAO;QACL,GAAGS,KAAK;QACRG,KAAK,EAAEH,KAAK,CAACG,KAAK,CAACO,MAAM,CAACF,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKR,MAAM,CAACG,OAAO,CAAC;QAC9DC,OAAO,EAAE;MACX,CAAC;IACH,KAAKR,SAAS;IACd,KAAKC,WAAW;MACd,OAAO;QACL,GAAGE,KAAK;QACRG,KAAK,EAAEH,KAAK,CAACG,KAAK,CAACI,GAAG,CAACC,IAAI,IACzBA,IAAI,CAACC,GAAG,KAAKR,MAAM,CAACG,OAAO,CAACO,EAAE,GAAG;UAAE,GAAGH,IAAI;UAAEI,KAAK,EAAEX,MAAM,CAACG,OAAO,CAACQ;QAAM,CAAC,GAAGJ,IAC9E,CAAC;QACDF,OAAO,EAAEN,KAAK,CAACM,OAAO,IAAIN,KAAK,CAACM,OAAO,CAACG,GAAG,KAAKR,MAAM,CAACG,OAAO,CAACO,EAAE,GAC7D;UAAE,GAAGX,KAAK,CAACM,OAAO;UAAEM,KAAK,EAAEX,MAAM,CAACG,OAAO,CAACQ;QAAM,CAAC,GACjDZ,KAAK,CAACM,OAAO;QACjBD,OAAO,EAAE;MACX,CAAC;IACH,KAAKV,WAAW;MACd,OAAO;QACL,GAAGK,KAAK;QACRM,OAAO,EAAEL,MAAM,CAACG;MAClB,CAAC;IACH,KAAKR,aAAa;MAChB,OAAO;QACL,GAAGI,KAAK;QACRM,OAAO,EAAE;MACX,CAAC;IACH,KAAKb,UAAU;MACb,OAAO;QACL,GAAGO,KAAK;QACRa,KAAK,EAAEZ,MAAM,CAACG,OAAO;QACrBC,OAAO,EAAE;MACX,CAAC;IACH,KAAKX,WAAW;MACd,OAAO;QACL,GAAGM,KAAK;QACRK,OAAO,EAAE;MACX,CAAC;IACH;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}